name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        find services -name requirements.txt -exec pip install -r {} \;
        find services -name requirements-dev.txt -exec pip install -r {} \;
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 services/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 services/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: black --check services/
    
    - name: Import order check with isort
      run: isort --check-only services/
    
    - name: Type check with mypy
      run: |
        find services -name "*.py" -path "*/app/*" | head -10 | xargs mypy --ignore-missing-imports || true

  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/password
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        find services -name requirements.txt -exec pip install -r {} \;
        find services -name requirements-dev.txt -exec pip install -r {} \;
    
    - name: Test What-If Engine
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: |
        cd services/what-if-engine
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Test Topology Builder
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
        REDIS_URL: redis://localhost:6379
      run: |
        cd services/topology-builder
        python -m pytest tests/ -v --cov=app --cov-report=xml || true
    
    - name: Test Config Generator
      env:
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: |
        cd services/config-generator
        python -m pytest tests/ -v --cov=app --cov-report=xml || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./services/what-if-engine/coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build What-If Engine
      uses: docker/build-push-action@v5
      with:
        context: ./services/what-if-engine
        push: false
        tags: nettwin/what-if-engine:test
    
    - name: Build Topology Builder
      uses: docker/build-push-action@v5
      with:
        context: ./services/topology-builder
        push: false
        tags: nettwin/topology-builder:test
    
    - name: Build Config Generator
      uses: docker/build-push-action@v5
      with:
        context: ./services/config-generator
        push: false
        tags: nettwin/config-generator:test
    
    - name: Build Collector
      uses: docker/build-push-action@v5
      with:
        context: ./services/collector
        push: false
        tags: nettwin/collector:test
    
    - name: Build UI
      uses: docker/build-push-action@v5
      with:
        context: ./services/ui
        push: false
        tags: nettwin/ui:test

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create .env file
      run: cp .env.example .env
    
    - name: Start services
      run: |
        docker compose up -d --build
        sleep 60  # Wait for services to start
    
    - name: Wait for services to be healthy
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8001/health; do sleep 5; done'
        timeout 120 bash -c 'until curl -f http://localhost:8002/health; do sleep 5; done'
        timeout 120 bash -c 'until curl -f http://localhost:8003/health; do sleep 5; done'
    
    - name: Run API integration tests
      run: |
        # Test What-If Engine
        curl -X GET http://localhost:8001/health | grep -q "OK"
        
        # Test Topology Builder
        curl -X GET http://localhost:8002/health | grep -q "OK"
        
        # Test Config Generator  
        curl -X GET http://localhost:8003/health | grep -q "OK"
    
    - name: Run demo flow
      run: make demo || true
    
    - name: Check service logs
      if: failure()
      run: |
        echo "=== What-If Engine Logs ==="
        docker compose logs what-if-engine
        echo "=== Topology Builder Logs ==="
        docker compose logs topology-builder
        echo "=== Config Generator Logs ==="
        docker compose logs config-generator
    
    - name: Stop services
      if: always()
      run: docker compose down --volumes