import React from 'react'
import { 
  Settings, 
  Download, 
  Play, 
  FileText, 
  CheckCircle, 
  Clock,
  AlertCircle,
  Code
} from 'lucide-react'
import { api } from '../lib/api'
import { useTranslations } from '../lib/i18n'

const Configurations = () => {
  const { t } = useTranslations()
  
  const [selectedConfig, setSelectedConfig] = React.useState<string | null>(null)

  // Mock configuration data
  const configurations = [
    {
      id: 'config-001',
      name: 'QoS Configuration for VoIP',
      description: 'Quality of Service settings to prioritize VoIP traffic',
      device: 'R1, R2, R3',
      status: 'ready',
      created_at: '2024-01-15T10:30:00Z',
      template: 'cisco_qos.j2',
      size: '2.3 KB'
    },
    {
      id: 'config-002',
      name: 'BGP Route Optimization',
      description: 'Optimized BGP routing configuration for better path selection',
      device: 'R1, R4, R5',
      status: 'deployed',
      created_at: '2024-01-15T09:15:00Z',
      template: 'cisco_bgp.j2',
      size: '4.1 KB'
    },
    {
      id: 'config-003',
      name: 'OSPF Area Configuration',
      description: 'OSPF area setup with load balancing',
      device: 'R2, R3, R4',
      status: 'generating',
      created_at: '2024-01-15T10:45:00Z',
      template: 'cisco_ospf.j2',
      size: '1.8 KB'
    }
  ]

  const sampleConfig = `! QoS Configuration for VoIP Traffic
! Generated by NetTwinSaaS Config Generator
!
class-map match-any VOICE
 match dscp ef
 match protocol rtp audio
!
class-map match-any VIDEO
 match dscp af41
 match dscp af42
!
policy-map WAN_OUT
 class VOICE
  priority percent 30
  set dscp ef
 class VIDEO
  bandwidth percent 25
  set dscp af41
 class class-default
  bandwidth percent 45
  random-detect
!
interface GigabitEthernet0/1
 service-policy output WAN_OUT
!
! End of configuration`

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'ready':
        return CheckCircle
      case 'deployed':
        return CheckCircle
      case 'generating':
        return Clock
      case 'failed':
        return AlertCircle
      default:
        return Clock
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ready':
        return 'text-blue-600 bg-blue-100'
      case 'deployed':
        return 'text-green-600 bg-green-100'
      case 'generating':
        return 'text-yellow-600 bg-yellow-100'
      case 'failed':
        return 'text-red-600 bg-red-100'
      default:
        return 'text-gray-600 bg-gray-100'
    }
  }

  return (
    <div>
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{t.configurationsTitle}</h1>
            <p className="mt-2 text-gray-600">
              {t.configurationsDescription}
            </p>
          </div>
          <button className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
            <Settings className="h-4 w-4 mr-2" />
            Generate New Config
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Configurations List */}
        <div className="lg:col-span-2">
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">Generated Configurations</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {configurations.map((config) => {
                const StatusIcon = getStatusIcon(config.status)
                
                return (
                  <div 
                    key={config.id} 
                    className={`p-6 cursor-pointer hover:bg-gray-50 ${
                      selectedConfig === config.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''
                    }`}
                    onClick={() => setSelectedConfig(config.id)}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <h4 className="text-lg font-medium text-gray-900">
                            {config.name}
                          </h4>
                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(config.status)}`}>
                            <StatusIcon className="h-3 w-3 inline mr-1" />
                            {config.status}
                          </span>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-3">
                          {config.description}
                        </p>
                        
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <span>Devices: {config.device}</span>
                          <span>Template: {config.template}</span>
                          <span>Size: {config.size}</span>
                        </div>
                        
                        <div className="mt-3 text-xs text-gray-400">
                          Created: {new Date(config.created_at).toLocaleString()}
                        </div>
                      </div>

                      <div className="flex items-center space-x-2 ml-4">
                        {config.status === 'ready' && (
                          <>
                            <button className="p-2 text-gray-400 hover:text-gray-600">
                              <Download className="h-4 w-4" />
                            </button>
                            <button className="p-2 text-gray-400 hover:text-gray-600">
                              <Play className="h-4 w-4" />
                            </button>
                          </>
                        )}
                        <button className="p-2 text-gray-400 hover:text-gray-600">
                          <FileText className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        </div>

        {/* Configuration Preview */}
        <div className="lg:col-span-1">
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900 flex items-center">
                <Code className="h-5 w-5 mr-2" />
                Configuration Preview
              </h3>
            </div>
            <div className="p-6">
              {selectedConfig ? (
                <div>
                  <div className="mb-4">
                    <h4 className="font-medium text-gray-900 mb-2">
                      {configurations.find(c => c.id === selectedConfig)?.name}
                    </h4>
                    <p className="text-sm text-gray-600">
                      {configurations.find(c => c.id === selectedConfig)?.description}
                    </p>
                  </div>
                  
                  <div className="bg-gray-900 rounded-lg p-4 overflow-x-auto">
                    <pre className="text-sm text-green-400 font-mono whitespace-pre-wrap">
                      {sampleConfig}
                    </pre>
                  </div>
                  
                  <div className="mt-4 flex space-x-2">
                    <button className="flex-1 flex items-center justify-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </button>
                    <button className="flex-1 flex items-center justify-center px-3 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium hover:bg-indigo-700">
                      <Play className="h-4 w-4 mr-2" />
                      Deploy
                    </button>
                  </div>
                </div>
              ) : (
                <div className="text-center py-8">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-500">
                    Select a configuration to preview
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Deployment Status */}
          <div className="bg-white shadow rounded-lg mt-6">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">Deployment Status</h3>
            </div>
            <div className="p-6">
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Last Deployment</span>
                  <span className="text-sm font-medium text-gray-900">2 hours ago</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Success Rate</span>
                  <span className="text-sm font-medium text-green-600">98.5%</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Pending Configs</span>
                  <span className="text-sm font-medium text-gray-900">1</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Failed Deployments</span>
                  <span className="text-sm font-medium text-red-600">0</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Configurations