version: '3.8'

services:
  # Storage Services
  neo4j:
    image: neo4j:5.15-community
    container_name: nettwin-neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["graph-data-science", "apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: nettwin-clickhouse
    environment:
      - CLICKHOUSE_DB=nettwin
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: nettwin-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: nettwin-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: nettwin-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  vault:
    image: hashicorp/vault:1.15
    container_name: nettwin-vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK

  # Application Services
  collector:
    build:
      context: ./services/collector
      dockerfile: Dockerfile
    container_name: nettwin-collector
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    ports:
      - "8004:8000"
    depends_on:
      kafka:
        condition: service_started
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  topology-builder:
    build:
      context: ./services/topology-builder
      dockerfile: Dockerfile
    container_name: nettwin-topology-builder
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    ports:
      - "8002:8000"
    depends_on:
      neo4j:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  what-if-engine:
    build:
      context: ./services/what-if-engine
      dockerfile: Dockerfile
    container_name: nettwin-what-if-engine
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - REDIS_URL=redis://redis:6379
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=dev-token
      - JWT_SECRET=your-secret-key-here
      - LOG_LEVEL=INFO
    ports:
      - "8001:8000"
    depends_on:
      neo4j:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  config-generator:
    build:
      context: ./services/config-generator
      dockerfile: Dockerfile
    container_name: nettwin-config-generator
    environment:
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=dev-token
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-here
      - LOG_LEVEL=INFO
    ports:
      - "8003:8000"
    depends_on:
      vault:
        condition: service_started
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./ansible-playbooks:/app/playbooks

  ui:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
    container_name: nettwin-ui
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8001
      - REACT_APP_TOPOLOGY_API_URL=http://localhost:8002
      - REACT_APP_CONFIG_API_URL=http://localhost:8003
    ports:
      - "3000:80"
    depends_on:
      - what-if-engine
      - topology-builder
      - config-generator

volumes:
  neo4j_data:
  neo4j_logs:
  clickhouse_data:
  redis_data:
  kafka_data:
  zookeeper_data:

networks:
  default:
    driver: bridge