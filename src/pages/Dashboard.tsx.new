import { useEffect, useState, useCallback } from 'react';
import { 
  Network, 
  Wifi,
  Activity as ActivityIcon,
  BellRing,
  Cpu,
  HardDrive,
  Database,
  RefreshCw
} from 'lucide-react';
import { format, subHours } from 'date-fns';
import { useTranslations } from '../lib/i18n';
import { SystemStats } from '../components/SystemStats';
import { AlertsPanel, AlertItem } from '../components/AlertsPanel';
import { cn } from '../lib/utils';

// Types
interface NetworkMetrics {
  totalNodes: number;
  activeLinks: number;
  averageUtilization: number;
  packetLoss: number;
  latency: number;
  throughput: number;
}

interface SystemMetrics {
  cpuUsage: number;
  memoryUsage: number;
  diskUsage: number;
  activeSimulations: number;
  completedSimulations: number;
  alerts: number;
}

// Generate mock data for network utilization
const generateNetworkData = () => {
  const data = [];
  const now = new Date();
  
  for (let i = 24; i >= 0; i--) {
    const timestamp = subHours(now, i);
    const hour = timestamp.getHours();
    
    // Simulate daily patterns
    const dailyPattern = 0.3 + 0.5 * Math.sin((hour - 9) / 24 * Math.PI * 2) * 0.5;
    const randomFactor = 0.8 + Math.random() * 0.4;
    
    const utilization = Math.min(0.95, Math.max(0.1, dailyPattern * randomFactor));
    const throughput = 10 * utilization * (0.9 + Math.random() * 0.2);
    
    data.push({
      timestamp,
      utilization,
      throughput
    });
  }
  
  return data;
};

// Mock data for alerts
const mockAlerts: AlertItem[] = [
  {
    id: 1,
    title: 'High CPU Usage',
    description: 'CPU usage on router R1 is above 90%',
    timestamp: new Date(Date.now() - 1000 * 60 * 15), // 15 minutes ago
    severity: 'high',
    acknowledged: false,
    source: 'Router R1'
  },
  {
    id: 2,
    title: 'Link Down',
    description: 'Link between R2 and R3 is down',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago
    severity: 'critical',
    acknowledged: true,
    source: 'Network'
  },
  {
    id: 3,
    title: 'High Latency',
    description: 'Latency to core network is above threshold',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 5), // 5 hours ago
    severity: 'medium',
    acknowledged: false,
    source: 'Network'
  },
  {
    id: 4,
    title: 'New Firmware Available',
    description: 'New firmware version 2.5.3 is available for your devices',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago
    severity: 'info',
    acknowledged: false,
    source: 'System'
  }
];

const Dashboard = () => {
  const { t } = useTranslations();
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  
  const [networkMetrics, setNetworkMetrics] = useState<NetworkMetrics>({
    totalNodes: 12,
    activeLinks: 24,
    averageUtilization: 0.54,
    packetLoss: 0.02,
    latency: 42,
    throughput: 4.72,
  });
  
  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics>({
    cpuUsage: 0.65,
    memoryUsage: 0.48,
    diskUsage: 0.32,
    activeSimulations: 2,
    completedSimulations: 156,
    alerts: mockAlerts.filter(alert => !alert.acknowledged).length,
  });
  
  const [alerts, setAlerts] = useState<AlertItem[]>(mockAlerts);
  const [networkData] = useState(generateNetworkData());
  
  const unacknowledgedAlerts = alerts.filter(alert => !alert.acknowledged);
  
  const handleAcknowledgeAlert = useCallback((alertId: string | number) => {
    setAlerts(prevAlerts => 
      prevAlerts.map(alert => 
        alert.id === alertId ? { ...alert, acknowledged: true } : alert
      )
    );
    
    // Update the alerts count
    setSystemMetrics(prev => ({
      ...prev,
      alerts: prev.alerts - 1
    }));
  }, []);
  
  const handleRefresh = useCallback(() => {
    setIsRefreshing(true);
    // In a real app, this would fetch fresh data from the API
    setTimeout(() => {
      setIsRefreshing(false);
    }, 1000);
  }, []);
  
  // Simulate data loading
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []);

  // System stats for the SystemStats component
  const systemStats = [
    {
      name: 'CPU Usage',
      value: `${Math.round(systemMetrics.cpuUsage * 100)}%`,
      icon: Cpu,
      status: systemMetrics.cpuUsage > 0.8 ? 'high' : systemMetrics.cpuUsage > 0.5 ? 'medium' : 'low',
      description: systemMetrics.cpuUsage > 0.8 
        ? 'High load detected' 
        : systemMetrics.cpuUsage > 0.5 
          ? 'Moderate load' 
          : 'Normal'
    },
    {
      name: 'Memory Usage',
      value: `${Math.round(systemMetrics.memoryUsage * 100)}%`,
      icon: HardDrive,
      status: systemMetrics.memoryUsage > 0.8 ? 'high' : systemMetrics.memoryUsage > 0.5 ? 'medium' : 'low',
      description: systemMetrics.memoryUsage > 0.8 
        ? 'High memory usage' 
        : systemMetrics.memoryUsage > 0.5 
          ? 'Moderate usage' 
          : 'Optimal'
    },
    {
      name: 'Disk Usage',
      value: `${Math.round(systemMetrics.diskUsage * 100)}%`,
      icon: Database,
      status: systemMetrics.diskUsage > 0.9 ? 'high' : systemMetrics.diskUsage > 0.7 ? 'medium' : 'low',
      description: systemMetrics.diskUsage > 0.9 
        ? 'Low disk space' 
        : systemMetrics.diskUsage > 0.7 
          ? 'Moderate usage' 
          : 'Sufficient space'
    },
  ];

  // Stats cards for the top of the dashboard
  const stats = [
    {
      name: 'Network Nodes',
      value: networkMetrics.totalNodes,
      change: '+2.5%',
      changeType: 'increase' as const,
      icon: Network,
      description: 'Active network devices',
    },
    {
      name: 'Active Links',
      value: networkMetrics.activeLinks,
      change: '+8.1%',
      changeType: 'increase' as const,
      icon: Wifi,
      description: 'Current network connections',
    },
    {
      name: 'Avg. Utilization',
      value: `${Math.round(networkMetrics.averageUtilization * 100)}%`,
      change: '-3.2%',
      changeType: 'decrease' as const,
      icon: ActivityIcon,
      description: 'Network bandwidth usage',
    },
    {
      name: 'Active Alerts',
      value: unacknowledgedAlerts.length,
      change: unacknowledgedAlerts.length > 0 ? `+${unacknowledgedAlerts.length}` : '0',
      changeType: unacknowledgedAlerts.length > 0 ? 'increase' : 'decrease' as const,
      icon: BellRing,
      description: 'Requires attention',
    },
  ];

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600 dark:text-gray-400">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header with title and refresh button */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Network Twin Dashboard
            </h1>
            <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
              Last updated: {format(new Date(), 'MMM d, yyyy h:mm a')}
            </p>
          </div>
          <button
            onClick={handleRefresh}
            disabled={isRefreshing}
            className={cn(
              "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500",
              isRefreshing && "opacity-75 cursor-not-allowed"
            )}
          >
            {isRefreshing ? (
              <>
                <RefreshCw className="animate-spin -ml-1 mr-2 h-4 w-4" />
                Refreshing...
              </>
            ) : (
              <>
                <RefreshCw className="-ml-1 mr-2 h-4 w-4" />
                Refresh Data
              </>
            )}
          </button>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8">
          {stats.map((stat, index) => (
            <div key={index} className="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center text-blue-600 dark:text-blue-400">
                      <stat.icon className="h-5 w-5" />
                    </div>
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
                      {stat.name}
                    </p>
                    <div className="flex items-baseline">
                      <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                        {stat.value}
                      </p>
                      <span className={cn(
                        "ml-2 text-sm font-medium",
                        stat.changeType === 'increase' 
                          ? 'text-green-600 dark:text-green-400' 
                          : 'text-red-600 dark:text-red-400'
                      )}>
                        {stat.change}
                      </span>
                    </div>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {stat.description}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column */}
          <div className="lg:col-span-2 space-y-6">
            {/* System Stats */}
            <SystemStats stats={systemStats} />
            
            {/* Network Utilization Chart */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                  Network Utilization (24h)
                </h3>
                <div className="flex space-x-2">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400">
                    Utilization
                  </span>
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400">
                    Throughput
                  </span>
                </div>
              </div>
              <div className="h-80">
                {/* Placeholder for chart - in a real app, you'd use a charting library */}
                <div className="h-full flex items-center justify-center bg-gray-50 dark:bg-gray-700/30 rounded-lg">
                  <p className="text-gray-500 dark:text-gray-400">Network utilization chart</p>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column */}
          <div className="space-y-6">
            {/* Alerts Panel */}
            <AlertsPanel 
              alerts={alerts} 
              onAcknowledge={handleAcknowledgeAlert} 
              className="h-full"
            />
            
            {/* Quick Actions */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
              <div className="px-6 py-5 border-b border-gray-100 dark:border-gray-700">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">Quick Actions</h3>
              </div>
              <div className="p-4">
                <div className="grid grid-cols-2 gap-4">
                  <button className="p-4 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/30 rounded-lg text-center">
                    <div className="mx-auto h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center text-blue-600 dark:text-blue-400 mb-2">
                      <Wifi className="h-5 w-5" />
                    </div>
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Run Test</span>
                  </button>
                  <button className="p-4 bg-green-50 dark:bg-green-900/20 hover:bg-green-100 dark:hover:bg-green-900/30 rounded-lg text-center">
                    <div className="mx-auto h-10 w-10 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center text-green-600 dark:text-green-400 mb-2">
                      <ActivityIcon className="h-5 w-5" />
                    </div>
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">New Simulation</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
